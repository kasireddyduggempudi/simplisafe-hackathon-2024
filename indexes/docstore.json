{"docstore/metadata": {"ae55dcce-9d44-4c35-9c91-fd593cb82837": {"doc_hash": "5e678ac1816a7b6a847e206d67bf640138aa29627afbcd22e0c6015b81d508a1"}, "d91cd832-9088-4284-b5bd-50708100c153": {"doc_hash": "bf51fe79997e35bedba7f158fbb14c47ddbd423b9d9abf0cda41364f934ef4b3"}, "1e2f4dba-9644-4b7a-9b74-2949187f21f4": {"doc_hash": "fabd8bc331ba26689a30f6ed13d01edca0dcde1e411b781c58e7f62301f9152e"}, "91e0514f-9f63-4c3e-aa2a-aa3af6054d67": {"doc_hash": "b1c2c932f27939a93c1bb788aba67cff0d8d83bd14190cb84b90bf9530f43e4e"}, "1e99d036-47a6-436b-b01f-1cb218a44dda": {"doc_hash": "2759bdf57cdd48cb814f8c9318e5cdeaa40540b9c4129626a75143cd5e32f3c3"}, "77f6664f-dba8-4710-bdda-6968fb42f191": {"doc_hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c"}, "d20b4680-fa3c-4923-bc5d-806800227fce": {"doc_hash": "d4bc639197d7213c8b11e82eaed653481dcf89bea947fead23327cdfc5278d51"}, "e6ead7c8-d59c-45af-91a9-ba2d8c243846": {"doc_hash": "1aa383c0be21a54404521050bbae5847dfbff4c4a0bdc1ef4b1b7b50a57efe74"}, "ca202dba-bbab-457f-b237-8c3fc683fe52": {"doc_hash": "882755c8ef850e8cfdf80b4fb26d75f1cc23d81200af3bd65c876effc5f351d4"}, "c2373593-dac7-4074-be12-eda8f197456b": {"doc_hash": "82066a4b98bca8dd743169513168cd56cc69c176f03baa9729ac437f4f7da835"}, "33fc0151-2e02-458e-94e5-73b045491eea": {"doc_hash": "4bcf329a5d1b130aecb16781682d69f4afe98e17fe2c8cee964873f91013a022", "ref_doc_id": "ae55dcce-9d44-4c35-9c91-fd593cb82837"}, "e3bf9e7e-f0ad-453d-8bdc-4759a0df682a": {"doc_hash": "6e7c3350395ac4369e9c5eb8e8734cbe6d6c8c9928ce298c055bce43c9230e2f", "ref_doc_id": "d91cd832-9088-4284-b5bd-50708100c153"}, "79127c6e-559d-47ad-8dbe-f48a0abc477a": {"doc_hash": "24ff790b60a57195c08eb674a361685e4215dc724bb4aa6a7b831f48d1fa43ab", "ref_doc_id": "1e2f4dba-9644-4b7a-9b74-2949187f21f4"}, "454c157f-cfbf-44a8-b647-758c547cbd39": {"doc_hash": "368c2b0d5005d63eef8ce66e818cc99eaabf1ae4c7d16e77e1b0cf4d384a6722", "ref_doc_id": "1e2f4dba-9644-4b7a-9b74-2949187f21f4"}, "ebcfdae7-4079-4c2f-8134-a0ed4c15c8ba": {"doc_hash": "7778a0a45c2de6d8d6fb2ced6e00f3b9459d12958b6d7a0c9fb562af87e82548", "ref_doc_id": "91e0514f-9f63-4c3e-aa2a-aa3af6054d67"}, "1bedc233-5c0e-4c26-b7c4-0f8561c7dce5": {"doc_hash": "96f666da61da93999732f455f7f0ce93e51b047810e6541b855a9490ab24a5e2", "ref_doc_id": "1e99d036-47a6-436b-b01f-1cb218a44dda"}, "c6b7fd5d-0d79-41fe-ab70-0093a619ff9a": {"doc_hash": "e6fc9256e3f510e4b31e2a804383f9edaaa0579491a62b37f505212ef4259047", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "306ddcb9-2bd6-4ad0-8e6c-4a8129f63da8": {"doc_hash": "74abb0774335bffc054f9f98c7279a75c84a74151683620f6daf1729e92e55f4", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "cecb7494-107b-4454-baa2-12a4bbcd153b": {"doc_hash": "c20249e49aa6c3c07d987195abf0962230f00600e847fce6316b3d43b38d4608", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "3b0ee5c6-6a7f-4663-aabe-f935c1b2f594": {"doc_hash": "cad413942febf61e2c2102f80ba83be8f08e50b0310bc43bb8fe4d2d2ca9d833", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "867e037a-e9a0-4a26-b3f2-3c45dcb05611": {"doc_hash": "18edc42dcdc2f7680f6159afbdea2d6a9072f4579b291ad7ac1e4210e0a17296", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "f2f712e8-d623-475d-ae04-e693bcd7c35c": {"doc_hash": "1f02d6c96df2c1eeac19880a1d28c256e08fa185f12b3aec1e8edaa9a6a78a86", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "955129c8-b265-4bb6-bf75-512cc6926fb7": {"doc_hash": "d2b620158ae9ea3dfc02877bcb23699e109531ac5a3c32e7e54131986917d38e", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "6a081681-d577-4656-9758-87ac2f7c309d": {"doc_hash": "7ca676cbbfe151bd05f012a36ffce177f9790ea78baf1431dfcb3852d4385783", "ref_doc_id": "77f6664f-dba8-4710-bdda-6968fb42f191"}, "5137ef90-764c-414b-b9e1-e43e4fa304e3": {"doc_hash": "323f60c9f67887416437b433c5ff822e81b9d24df22cfc724587394d24f8d5ce", "ref_doc_id": "d20b4680-fa3c-4923-bc5d-806800227fce"}, "4a90a6ca-26f0-4c74-b472-c49698db3398": {"doc_hash": "da1e73022b914fe76544986dc3192cf50a40acc25acda69240b90510474bef9d", "ref_doc_id": "e6ead7c8-d59c-45af-91a9-ba2d8c243846"}, "3ca274a9-b6c5-4ad6-9fb0-bbcf28e4b6a9": {"doc_hash": "6cfba2b04b3be293ff2000be28ddaf1ee4fca58765f86dbfa752785eccf42899", "ref_doc_id": "ca202dba-bbab-457f-b237-8c3fc683fe52"}, "8bf7f3f9-0b60-4043-859a-191103855463": {"doc_hash": "8c428c04cf059d66545f952ee6afb58906901f61a8bd1fecddf4d78623ba0891", "ref_doc_id": "c2373593-dac7-4074-be12-eda8f197456b"}}, "docstore/data": {"33fc0151-2e02-458e-94e5-73b045491eea": {"__data__": {"id_": "33fc0151-2e02-458e-94e5-73b045491eea", "embedding": null, "metadata": {"file_path": "training_data/1_what_is_dex.txt", "file_name": "1_what_is_dex.txt", "file_type": "text/plain", "file_size": 1941, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae55dcce-9d44-4c35-9c91-fd593cb82837", "node_type": "4", "metadata": {"file_path": "training_data/1_what_is_dex.txt", "file_name": "1_what_is_dex.txt", "file_type": "text/plain", "file_size": 1941, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "5e678ac1816a7b6a847e206d67bf640138aa29627afbcd22e0c6015b81d508a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e3bf9e7e-f0ad-453d-8bdc-4759a0df682a", "node_type": "1", "metadata": {}, "hash": "6e7c3350395ac4369e9c5eb8e8734cbe6d6c8c9928ce298c055bce43c9230e2f", "class_name": "RelatedNodeInfo"}}, "hash": "4bcf329a5d1b130aecb16781682d69f4afe98e17fe2c8cee964873f91013a022", "text": "What is dex?\ndex is an internal-open-source CLI tool and library designed to enable SimpliSafe cloud software teams to build, deploy, and operate microservices (or front-ends) more quickly, reliably, and cheaply than they can today.\n\nintegrations\n\ndex encapsulates SimpliSafe's opinions, policies, and best-practices for building, deploying, and operating apps. You can think of it as a PaaS (\u201cplatform as a service\u201d) that helps glue together all of SimpliSafe's chosen infrastructure, including:\n\nAWS IAM\nDocker\nKubernetes (AWS EKS)\nnginx-ingress\nAWS SSM Parameter Store\nAWS ECR\nArtifactory\nGithub Actions\nTelegraf\nGrafana\nOpenTelemetry\ndex integrates all these systems, and provides a consistent, simple (and hopefully fun) interface that's designed to allow developers to focus on business problems instead of infrastructure and plumbing.\n\nNo, I mean, what is it specifically?\ndx CLI\ndx is a CLI tool that you install globally. It doesn't have many features other:\n\ninstall/upgrade the dex library in your project\ninvoke the entrypoint defined in the dex library in your project and pass it commands/arguments.\ndx doesn't change often, and is designed to be broadly compatible as the dex library evolves.\n\ndex library\nYou use dx to install a dex subdirectory into your project. This subdirectory contains an npm package (i.e. with a package.json) that references a specific version of the @simplidevops/dex npm package. This version goes into the package-lock.json, and is locked at that version until you explicitly upgrade it.\n\nThis project-in-a-subdirectory allows you to write arbitrary, project-specific build/deploy actions in TypeScript (e.g. project-defined commands) using the full power of the @simplidevops/dex package and all of its APIs.\n\nSince it's a subdirectory with its own package.json, the dex npm package and its dependencies are completely independent from that of your project (if you're even using node.js/npm).", "start_char_idx": 0, "end_char_idx": 1937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3bf9e7e-f0ad-453d-8bdc-4759a0df682a": {"__data__": {"id_": "e3bf9e7e-f0ad-453d-8bdc-4759a0df682a", "embedding": null, "metadata": {"file_path": "training_data/2_why_dex.txt", "file_name": "2_why_dex.txt", "file_type": "text/plain", "file_size": 3121, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d91cd832-9088-4284-b5bd-50708100c153", "node_type": "4", "metadata": {"file_path": "training_data/2_why_dex.txt", "file_name": "2_why_dex.txt", "file_type": "text/plain", "file_size": 3121, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "bf51fe79997e35bedba7f158fbb14c47ddbd423b9d9abf0cda41364f934ef4b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33fc0151-2e02-458e-94e5-73b045491eea", "node_type": "1", "metadata": {"file_path": "training_data/1_what_is_dex.txt", "file_name": "1_what_is_dex.txt", "file_type": "text/plain", "file_size": 1941, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "4bcf329a5d1b130aecb16781682d69f4afe98e17fe2c8cee964873f91013a022", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79127c6e-559d-47ad-8dbe-f48a0abc477a", "node_type": "1", "metadata": {}, "hash": "24ff790b60a57195c08eb674a361685e4215dc724bb4aa6a7b831f48d1fa43ab", "class_name": "RelatedNodeInfo"}}, "hash": "6e7c3350395ac4369e9c5eb8e8734cbe6d6c8c9928ce298c055bce43c9230e2f", "text": "dex\n\nAbout dexWhy do we need dex/EKS?\n\nOn this page\n\nWhy do we need dex/EKS?\n\nEmpowerment and operational maturity\n\nHistorically at SimpliSafe, teams haven't had have end-to-end ownership of their own deployment and operations. For security reasons, their access to the legacy shared AWS account has been limited, their understanding of the pipelines they use is low, and they're forced to depend on the Cloud Engineering team for basic troubleshooting and architectural improvements.\n\nThis leaves them less likely to drive towards optimal DevOps practices (e.g. continuous deployment, continuous improvement, observability, SLOs, and other SRE tools), and customer experience has suffered as a result.\n\nThe dex/EKS is designed from the ground up to be used in our federated AWS team accounts, which empowers teams to fully own their own services, from development to production. With the ability to fully own and operate services, teams will be able to rapidly iterate, continuously improve, and develop the operational maturity that will lead to better reliability and faster feature development.\n\nEncapsulate the best tools and best practices\n\nMany of our key services use legacy deployment and operational tools which, because of lack of investment and years of hacks and divergent evolution, have become overly complex, risky, error-prone, and lacking in modern features for reliability, resilience, observability, and testing. This is significantly impacting speed of customer value delivery.\n\nThe dex/EKS platform encapsulates hard-won knowledge from across many teams across SimpliSafe, and implements best-practices by default, including security, reliability, observability, testing, and developer experience. And because it has been so widely adopted across teams, and is built using a product-driven, internal-open-source model, its value grows with each feature added.\n\nBecause dex/EKS is built on Kubernetes, it also brings the power of the entire cloud-native open-source community and ecosystem. This provides a rich source from which to rapidly add battle-tested features to the platform, making them available for all teams at once.\n\nLowering the burden of distributed systems\n\nThe inherent complexity of building, maintaining, and operating a fleet of microservices in the cloud is huge, making it very hard for teams to make progress on business goals.\n\ndex/EKS provides a set of developer-oriented abstractions that are drastically simpler than the underlying complexity of the APIs they abstract (e.g. AWS, Kubernetes), while still allowing teams to drop down to a lower level to support rare edge cases. With dex/EKS, all apps are built, deployed, and operated in a consistent way, so knowledge can be re-used across projects, and even teams.\n\nAnd because of the powerful abstractions provided by Kubernetes' API, it's now possible to effectively separate application concerns from operator concerns. This allows Cloud Engineering to move infrastructure forward (e.g. implement security, cost-savings, backup, observability, resilience features) without requiring any significant effort from teams.", "start_char_idx": 0, "end_char_idx": 3121, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79127c6e-559d-47ad-8dbe-f48a0abc477a": {"__data__": {"id_": "79127c6e-559d-47ad-8dbe-f48a0abc477a", "embedding": null, "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e2f4dba-9644-4b7a-9b74-2949187f21f4", "node_type": "4", "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "fabd8bc331ba26689a30f6ed13d01edca0dcde1e411b781c58e7f62301f9152e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e3bf9e7e-f0ad-453d-8bdc-4759a0df682a", "node_type": "1", "metadata": {"file_path": "training_data/2_why_dex.txt", "file_name": "2_why_dex.txt", "file_type": "text/plain", "file_size": 3121, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "6e7c3350395ac4369e9c5eb8e8734cbe6d6c8c9928ce298c055bce43c9230e2f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "454c157f-cfbf-44a8-b647-758c547cbd39", "node_type": "1", "metadata": {}, "hash": "368c2b0d5005d63eef8ce66e818cc99eaabf1ae4c7d16e77e1b0cf4d384a6722", "class_name": "RelatedNodeInfo"}}, "hash": "24ff790b60a57195c08eb674a361685e4215dc724bb4aa6a7b831f48d1fa43ab", "text": "dex\n\nAbout dexFeatures\n\nFeatures\n\nCommands: dex provides a number of built-in commands that can be composed into a CI/CD pipeline. This includes commands like build (build your Dockerfile), push (push your image to ECR), deploy (deploy your app to Kubernetes), etc.\n\nProject-defined commands: In dex, you can define your own commands (or override dex's built-in commands) as a file with a single TypeScript function. All the same TypeScript APIs that dex uses for its built-in commands are available for custom commands. This is how you would implement project-specific pipeline steps (i.e. integration tests, building non-container artifacts, etc).\n\nConfiguration: dex provides a highly flexible, platform-independent configuration system to manage environment-specific config properties (as code).\n\nSecrets: dex supports AWS Parameter Store secrets via its configuration system. Configuration values can contain references to secrets, and dex will take care of resolving them transparently, so your application doesn't need to know the difference between a secret and any other config value. This supports both secrets used via dex at build/deploy-time (e.g. an Artifactory API key) as well as runtime secrets used by your app at runtime (e.g. database credentials).\n\nScaffolding: After answering a few questions about your project via a CLI-based survey, dex can generate all the boilerplate needed for a new project, including config files, Kubernetes manifests, commands, a Dockerfile and .dockerignore, etc.\n\nAWS integration:\n\nUser authentication: dex takes care of the details of authenticating using your AWS SAML roles, including systems that you access via non-AWS tools, such as ECR repos (via the docker CLI) and EKS clusters (via kubectl or other Kubernetes ecosystem tools).\n\nIAM integration: dex will automatically create IAM roles and policies for your app to use at runtime, using least privilege configurations by default. dex takes care of all the details around bridging the worlds of Kubernetes and IAM, so your Kubernetes apps can use role-based authorization to access AWS services.\n\nECR integration: dex takes care of creating (and authenticating your docker client to) ECR repos seamlessly as part of its docker.push() TypeScript API and built-in push command.\n\nKubernetes integration: dex is designed to provide a thin layer of value-added features on top Kubernetes, giving teams the full power of the Kubernetes API and ecosystem (which has far richer capabilities than ECS). dex is also specifically designed take full advantage of the DevOps team's managed EKS clusters, and can make many simplifying assumptions as a result. dex's Kubernetes features includes:\n\nManifest templates: dex has a simple templating system that enables you to create environment-independent, parameterized, Kubernetes manifest files (using the native Kubernetes manifest YAML format).\n\nDefault manifests: The manifests provided by scaffolding are optimized for resiliency, utilizing built-in features of Kubernetes (i.e. Deployments to support rolling releases and rapid rollback, health-checks, load-balancing, auto-scaling, etc).\n\nAutomatic debugging help: dex can automatically debug failed deployments, using an automated version of the manual steps an experienced Kubernetes user would perform to troubleshoot. For each of the steps, dex prints context along with the kubectl commands involved, so that developers can learn debugging skills.\n\nManifest transformers: dex has a pipeline of manifest \"transformers\" that take care of injecting cross-cutting boilerplate into your manifests when they're deployed. This includes things like injecting init-containers to load secrets, creating IAM-linked service accounts, tagging objects with metadata, adding cache-busting annotations, etc.\n\nDNS and Certs: Apps launched in our managed EKS clusters can use the pre-configured Ingress controllers to handle DNS and TLS certs automatically. Apps get a unique public (or internal) hostname, and are accessible instantly after deployment.\n\nEphemeral environments: dex is designed around the idea of ephemeral environments, which can be instantly created/destroyed, and are automatically cleaned up after a configurable number of days. This allows you to do things like:\n\nlaunch a running app for every feature branch build\n\nlaunch a test target environment for integration testing in a CI/CD pipeline\n\nlaunch a running app from a developer laptop to test out code in a prod-like environment\n\nIntegration testing support: dex provides TypeScript APIs to execute integration tests as pods in Kubernetes, using an ephemeral instance of your application as the test subject. This eliminates the need to maintain separate configurations for Docker Compose vs ECS, etc, and allows you to utilize any test framework that can run in a container.\n\nImmutable artifacts: dex builds an environment-independent, immutable artifact (called a kubepack), which can be promoted between environments (either automatically or manually). These artifacts allow you to deploy without needing access to the original git repo, or requiring any of the original build-time dependencies.", "start_char_idx": 0, "end_char_idx": 5164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "454c157f-cfbf-44a8-b647-758c547cbd39": {"__data__": {"id_": "454c157f-cfbf-44a8-b647-758c547cbd39", "embedding": null, "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e2f4dba-9644-4b7a-9b74-2949187f21f4", "node_type": "4", "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "fabd8bc331ba26689a30f6ed13d01edca0dcde1e411b781c58e7f62301f9152e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79127c6e-559d-47ad-8dbe-f48a0abc477a", "node_type": "1", "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "24ff790b60a57195c08eb674a361685e4215dc724bb4aa6a7b831f48d1fa43ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebcfdae7-4079-4c2f-8134-a0ed4c15c8ba", "node_type": "1", "metadata": {}, "hash": "7778a0a45c2de6d8d6fb2ced6e00f3b9459d12958b6d7a0c9fb562af87e82548", "class_name": "RelatedNodeInfo"}}, "hash": "368c2b0d5005d63eef8ce66e818cc99eaabf1ae4c7d16e77e1b0cf4d384a6722", "text": "This allows you to do things like:\n\nlaunch a running app for every feature branch build\n\nlaunch a test target environment for integration testing in a CI/CD pipeline\n\nlaunch a running app from a developer laptop to test out code in a prod-like environment\n\nIntegration testing support: dex provides TypeScript APIs to execute integration tests as pods in Kubernetes, using an ephemeral instance of your application as the test subject. This eliminates the need to maintain separate configurations for Docker Compose vs ECS, etc, and allows you to utilize any test framework that can run in a container.\n\nImmutable artifacts: dex builds an environment-independent, immutable artifact (called a kubepack), which can be promoted between environments (either automatically or manually). These artifacts allow you to deploy without needing access to the original git repo, or requiring any of the original build-time dependencies.\n\nGoCD integration: dex is designed so it can be used on any CI/CD platform, and has no hard dependencies on GoCD. That said, we've created a set GoCD specific integrations, including a agent image (with dex's dependencies installed), example pipelines, templates, and a TypeScript API which encapsulates GoCD-specific environment variables.\n\nObservability: apps built using dex are automatically configured to be observable. This includes:\n\nmetrics via Telegraf and InfluxDB\n\nLogging via DevOps managed ELK stack\n\nTracing via OpenTelemetry and Jaeger\n\nInstallation and versioning: dex's CLI is installed globally, and can install (or upgrade) the dex library into any project with a single command. The dex library version is locked (via a standard npm package-lock.json), which ensures that the version of dex is controlled by a file in git.", "start_char_idx": 4239, "end_char_idx": 6007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebcfdae7-4079-4c2f-8134-a0ed4c15c8ba": {"__data__": {"id_": "ebcfdae7-4079-4c2f-8134-a0ed4c15c8ba", "embedding": null, "metadata": {"file_path": "training_data/4_dex_opinions.txt", "file_name": "4_dex_opinions.txt", "file_type": "text/plain", "file_size": 2303, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91e0514f-9f63-4c3e-aa2a-aa3af6054d67", "node_type": "4", "metadata": {"file_path": "training_data/4_dex_opinions.txt", "file_name": "4_dex_opinions.txt", "file_type": "text/plain", "file_size": 2303, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "b1c2c932f27939a93c1bb788aba67cff0d8d83bd14190cb84b90bf9530f43e4e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "454c157f-cfbf-44a8-b647-758c547cbd39", "node_type": "1", "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "368c2b0d5005d63eef8ce66e818cc99eaabf1ae4c7d16e77e1b0cf4d384a6722", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1bedc233-5c0e-4c26-b7c4-0f8561c7dce5", "node_type": "1", "metadata": {}, "hash": "96f666da61da93999732f455f7f0ce93e51b047810e6541b855a9490ab24a5e2", "class_name": "RelatedNodeInfo"}}, "hash": "7778a0a45c2de6d8d6fb2ced6e00f3b9459d12958b6d7a0c9fb562af87e82548", "text": "dex\n\nAbout dexOpinions\n\nOpinions\n\nHere's the opinions that dex is built on:\n\nDevOps philosophy: empowerment & accountability: Teams should operate the systems they build, which maximizes the feedback loop which incentivizes teams to build robust and resilient software. Teams need sufficient tools, permissions, and access to self-service, troubleshoot, or debug any infrastructure running their code.\n\nContainer and Kubernetes abstractions: Containers and the Kubernetes API provide a powerful abstraction between developers and operators. They allow operations teams to standardize infrastructure, which can be highly sophisticated and optimized, while supporting any containerized workload. Developers are free to choose the tools, languages, and platforms that work best for them, and can use the power of the Kubernetes API and ecosystem to compose their app's structure.\n\nSimplicity and flexibility: A deployment system should be transparent, simple, granular, and modifiable. It should be composed of small, single purpose utilities that can be easily swapped out.\n\nSane defaults, but modifiable: Good CI/CD tooling should provide a default configuration that works well out-of-the box, but that teams can break out of as needed.\n\nPer-project isolation: In the microservices methodology, CI/CD pipelines should be isolated, per project. Developers should never fear that changing the build or deployment properties of one project could break any other.\n\nRun anything locally: All build and deployment scripts should be runnable (and testable) on a laptop, not only on a CI server. The CI/CD system integration should be a very thin wrapper on top of a set of full-featured tools, serving only to glue externalities (like AWS credentials or GitHub repos).\n\n12 Factor apps: Apps should be built using the 12-factor app methodology. Apps should be disposable instances, release artifacts should be immutable, configuration should be supplied as environment variables or files on mounted volumes, logs should be written to stdout/stderr, dependencies should be isolated, etc.\n\nInfrastructure and configuration as code: App configuration and infrastructure should be defined in code, which is committed to your git repo (which is versioned, reviewed, and auditable) instead of point-and-click systems.", "start_char_idx": 0, "end_char_idx": 2303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bedc233-5c0e-4c26-b7c4-0f8561c7dce5": {"__data__": {"id_": "1bedc233-5c0e-4c26-b7c4-0f8561c7dce5", "embedding": null, "metadata": {"file_path": "training_data/5_dex_installation.txt", "file_name": "5_dex_installation.txt", "file_type": "text/plain", "file_size": 2611, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e99d036-47a6-436b-b01f-1cb218a44dda", "node_type": "4", "metadata": {"file_path": "training_data/5_dex_installation.txt", "file_name": "5_dex_installation.txt", "file_type": "text/plain", "file_size": 2611, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "2759bdf57cdd48cb814f8c9318e5cdeaa40540b9c4129626a75143cd5e32f3c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebcfdae7-4079-4c2f-8134-a0ed4c15c8ba", "node_type": "1", "metadata": {"file_path": "training_data/4_dex_opinions.txt", "file_name": "4_dex_opinions.txt", "file_type": "text/plain", "file_size": 2303, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "7778a0a45c2de6d8d6fb2ced6e00f3b9459d12958b6d7a0c9fb562af87e82548", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6b7fd5d-0d79-41fe-ab70-0093a619ff9a", "node_type": "1", "metadata": {}, "hash": "e6fc9256e3f510e4b31e2a804383f9edaaa0579491a62b37f505212ef4259047", "class_name": "RelatedNodeInfo"}}, "hash": "96f666da61da93999732f455f7f0ce93e51b047810e6541b855a9490ab24a5e2", "text": "dex\n\nInstallation\n\nOn this page\n\nInstallation\n\nPrerequisites\n\nPrerequisite tools\n\ndex requires a few prerequisites:\n\nbash 4+ or zsh\n\nnode.js 12+ (including npm, npx): brew install node\n\nkubectl: brew install kubectl\n\nDocker\n\nIn Docker Desktop settings, enable Docker Compose V2\n\naws CLI version 2\n\nThe saml-aws-auth credential helper we use to authenticate to AWS with Okta.\n\nTIP\n\nYou don't need to configure AWS profiles to use dex, only ensure that you have saml-aws-auth installed.\n\nIf saml-aws-auth is installed at the default location by brew (/Applications/saml-aws-auth.app/Contents/MacOS/saml-aws-auth), dex will use it without any further configuration. If you've installed it anywhere else, you can customize the location dex uses in your dexrc file.\n\nEKS cluster\n\nTo use dex, your team's AWS accounts must have had an EKS cluster provisioned. This can be done easily, via self-service, by doing a simple PR to our EKS clusters repo.\n\nRequired access\n\nYou must have VPN access configured\n\nAWS authentication must be configured for any AWS accounts you'll be using. Talk with your team lead about which accounts/roles you need access to, and submit an IT ticket to get access via Okta.\n\nInstall dx\n\nINFO\n\nYou must be on the VPN to install dx and dex!\n\nTo install dx (dex's command line app), run the following one-liner:\n\nsudo curl --fail https://artifactory.tools.simplisafe.com/artifactory/devops-generic/dx/latest -o /usr/local/bin/dx && sudo chmod +x /usr/local/bin/dx && dx -v\n\nTIP\n\nYou don't need to install dx to /usr/local/bin: anywhere on your PATH is fine. For example, if you prefer ~/.local/bin:\n\ncurl --fail https://artifactory.tools.simplisafe.com/artifactory/devops-generic/dx/latest -o ~/.local/bin/dx && chmod +x ~/.local/bin/dx && dx -v\n\nInstall shell auto-completion\n\nIt's really nice to use dx with shell auto-completion- you can type the first couple letters of a command, press tab, and the command will auto-complete. dx can install auto-completion for you:\n\ndx install-completion\n\nThen restart your shell (or just reload your shell profile, e.g. . ~/.bashrc).\n\nCAUTION\n\nIf you're using zsh, and you get the following error:\n\n/Users/{yourname}/.dx-zsh-completion.sh:16: command not found: compdef\n\nYou need to enable \"compdef\" by adding the following lines to the beginning of your ~/.zshrc:\n\nautoload -Uz compinit\n\ncompinit\n\nInstall dex into a project\n\nTIP\n\nIf you haven't used installed dex in a project before, you may want to check out the Quickstart guide first.\n\nChange directories into your target project.\n\nInstall dex in the project with dx install-dex\n\nRun dx scaffold", "start_char_idx": 0, "end_char_idx": 2610, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6b7fd5d-0d79-41fe-ab70-0093a619ff9a": {"__data__": {"id_": "c6b7fd5d-0d79-41fe-ab70-0093a619ff9a", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1bedc233-5c0e-4c26-b7c4-0f8561c7dce5", "node_type": "1", "metadata": {"file_path": "training_data/5_dex_installation.txt", "file_name": "5_dex_installation.txt", "file_type": "text/plain", "file_size": 2611, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "96f666da61da93999732f455f7f0ce93e51b047810e6541b855a9490ab24a5e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "306ddcb9-2bd6-4ad0-8e6c-4a8129f63da8", "node_type": "1", "metadata": {}, "hash": "74abb0774335bffc054f9f98c7279a75c84a74151683620f6daf1729e92e55f4", "class_name": "RelatedNodeInfo"}}, "hash": "e6fc9256e3f510e4b31e2a804383f9edaaa0579491a62b37f505212ef4259047", "text": "dex\n\nQuickstart Guide\n\nOn this page\n\nQuickstart Guide\n\nIn this tutorial, we'll install dex into a sample node.js webapp, and deploy it to your team's EKS cluster.\n\nWHO IS THIS TUTORIAL USEFUL FOR?\n\nA developer who understands the basic idea of containers, Docker, and Kubernetes, even if they haven't used them before.\n\nA developer who hasn't already used dex before. If you've already used it successfully, this will likely be too basic for you.\n\nAny developer, regardless of experience with node.js. Even though this tutorial uses node.js/TypeScript, dex is platform agnostic, so you don't need to have node.js experience for this workshop.\n\nPrerequisites\n\nEnsure you have installed dx and prerequisites (the command runner for dex).\n\nYou should have a basic understanding of what these tools are:\n\nContainers\n\nDocker\n\nKubernetes\n\nClone the dex-tutorial repo\n\nWe have an example project which is a \"vanilla\" node.js/TypeScript \"hello world\" web app, and has not been \"dex-ified\" yet.\n\ngit clone git@github.com:simplisafe/dex-tutorial.git\n\nGet a feel for how the app works\n\nLet's just play with the tutorial app and see how it works without dex.\n\nFirst, let's build and run the app locally using idiomatic npm commands:\n\n# Installs all the dependencies of this app,\n\n# as defined in its package.json\n\nnpm install\n\n\n\n# Compiles TypeScript\n\nnpm run build\n\n\n\n# Runs the entrypoint\n\nnpm run start\n\nOops! You probably got an error about missing environment variables. Like most well-designed apps these days, this app follows 12-factor principles, and uses environment variables for config. So far, we haven't done anything to provide those env variables in our current shell, so the app crashed loudly, with a helpful error message (as it should).\n\nLet's set the expected environment variables from the repo's .env file, and then re-run the app:\n\n# Read and export the variables in .env\n\nset -a; source .env; set +a", "start_char_idx": 0, "end_char_idx": 1912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "306ddcb9-2bd6-4ad0-8e6c-4a8129f63da8": {"__data__": {"id_": "306ddcb9-2bd6-4ad0-8e6c-4a8129f63da8", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6b7fd5d-0d79-41fe-ab70-0093a619ff9a", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "e6fc9256e3f510e4b31e2a804383f9edaaa0579491a62b37f505212ef4259047", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cecb7494-107b-4454-baa2-12a4bbcd153b", "node_type": "1", "metadata": {}, "hash": "c20249e49aa6c3c07d987195abf0962230f00600e847fce6316b3d43b38d4608", "class_name": "RelatedNodeInfo"}}, "hash": "74abb0774335bffc054f9f98c7279a75c84a74151683620f6daf1729e92e55f4", "text": "# Compiles TypeScript\n\nnpm run build\n\n\n\n# Runs the entrypoint\n\nnpm run start\n\nOops! You probably got an error about missing environment variables. Like most well-designed apps these days, this app follows 12-factor principles, and uses environment variables for config. So far, we haven't done anything to provide those env variables in our current shell, so the app crashed loudly, with a helpful error message (as it should).\n\nLet's set the expected environment variables from the repo's .env file, and then re-run the app:\n\n# Read and export the variables in .env\n\nset -a; source .env; set +a\n\n\n\n# Restart the app\n\nnpm run start\n\nThere we go; we should have just seen some nice JSON logs (the app is using otel-winston-logger for logging) indicating the app has started up.\n\nNow the app should be running at http://localhost:4999. Open it up in a browser to check it out; it should be a white page with the title \"Hello World\", along with some values of config variables, just to demonstrate that they can be plumbed through the app.\n\nBefore we continue, let's hit CTRL-C to stop the app.\n\nDebugging\n\nThis repo has .vscode/launch.json and .vscode/tasks.json files included, which configure and the default action to compile and run the app in the debugger. If you're using vscode, you can give it a shot:\n\nOpen src/server.ts\n\nPut a breakpoint in the startup() function\n\nStart the process with debugging by pressing F5 or using Run -> Start Debugging from the top menu\n\nThe debugger should have stopped at the breakpoint\n\nPress \"Continue\" (the forward arrow icon) in the debugger panel to allow the app to run\n\nVerify the app is running at http://localhost:4999.\n\nHOW DID THE .ENV FILE WORK WHEN DEBUGGING?\n\nWhen using the debugger, you didn't have to set the environment variables manually; this is because in the .vscode/launch.json, there's a envFile property set pointing at the .env file, which causes it to load environment variables before starting the process.\n\nA bit of cleanup\n\nBefore we go further, let's delete the environment variables we created, so we won't be confused about where these are being set in future steps.\n\nunset SOME_PROPERTY\n\nunset DATABASE_USERNAME\n\nunset DATABASE_PASSWORD\n\nCool, now let's install dex!\n\nInstalling dex into your project\n\nOpen your terminal, navigate to your project's root directory, and run:\n\ndx install-dex\n\nInspect your project layout. Notice that you now have a new directory: dex. This directory contains a node.js module with a package.json and package-lock.json (standard node.js package definition files). They reference a specific version of the dex library, and should be committed to your git repo; which gives you control over when you upgrade dex.\n\nThe directory will also contain a node_modules directory, which should NOT be committed to source control (the file dex/.gitignore prevents this). When you commit this project to source control, and someone else pulls it down, running any dx command will automatically restore the node_modules directory.\n\nLearning about dx\n\nYou can quickly find commands and arguments for dx commands. Here's how to show all commands you can run with dx:\n\n# List all commands available in this project\n\ndx ls\n\nNote that this shows the three types of commands for dx:\n\nProject-defined commands: Commands that are defined specifically for this project. They do things like call platform specific programs to build/run your app (we'll learn more about them in this tutorial)\n\ndex library commands: Built-in commands that operate on containers, and apply to all projects.\n\ndx CLI commands: Commands that are built into dx (the CLI) as opposed to the dex library version that's installed in the project. These are all about installing dex and managing kubepacks.\n\nWe can also learn about any command with the --help flag. For example, lets look at the available options for dx config:\n\ndx config --help\n\nGenerate scaffolding\n\ndex can scaffold files for your project (i.e. generate boilerplate such as config files, manifests, etc):\n\ndx scaffold\n\nThis will ask you a series of questions about your team, project, and AWS account roles, and then generate a bunch of files in your dex directory. These will include:\n\nA config directory for environment-defining config files\n\nA commands directory, for project-defined commands\n\nA manifests directory for your project's kubernetes manifests\n\nA Dockerfile that is specific for the platform you select\n\n.vscode configuration to support dex config file JSON schemas\n\n.gitignore and .dockerignore entries for dex-related files and directories\n\nIt will also generate a config file in your home directory: ~/.dexrc which contains mappings of AWS account IDs to the SAML role you use when accessing the account.\n\nChecking your configuration\n\nLet's check out the starter config files that just got generated for you in dex/config:\n\ndex/config\n\n\u251c\u2500\u2500 dev.yaml\n\n\u251c\u2500\u2500 feature.yaml\n\n\u251c\u2500\u2500 prd.yaml\n\n\u251c\u2500\u2500 project.yaml\n\n\u251c\u2500\u2500 qa.yaml\n\n\u2514\u2500\u2500 stg.yaml\n\nThese files each define an \"environment\" in dex. Let's look at an example; open up dex/config/qa.yaml:\n\ndex/config/qa.yaml\n\n# This config file defines the environment 'qa', which inherits from project.yaml.\n\n# This is intended to be a shared integration environment, where commits from the main git branch\n\n# are immediately deployed.", "start_char_idx": 1317, "end_char_idx": 6615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cecb7494-107b-4454-baa2-12a4bbcd153b": {"__data__": {"id_": "cecb7494-107b-4454-baa2-12a4bbcd153b", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "306ddcb9-2bd6-4ad0-8e6c-4a8129f63da8", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "74abb0774335bffc054f9f98c7279a75c84a74151683620f6daf1729e92e55f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3b0ee5c6-6a7f-4663-aabe-f935c1b2f594", "node_type": "1", "metadata": {}, "hash": "cad413942febf61e2c2102f80ba83be8f08e50b0310bc43bb8fe4d2d2ca9d833", "class_name": "RelatedNodeInfo"}}, "hash": "c20249e49aa6c3c07d987195abf0962230f00600e847fce6316b3d43b38d4608", "text": "# This environment uses the 'mainBranch' generator in order to create container image tags that\n\n# incorporate the build number and git commit.\n\n\n\n# To tell dex to use this environment, set DEX_ENV=qa\n\n\n\napps:\n\n  main:\n\n    aws:\n\n      accountEnv: \"qa\"\n\n    containerImage:\n\n      tag: \"@generator mainBranch.tag()\"\n\n    kubernetes:\n\n\n\n      # This property allows you to define arbitrary values that can be transcluded into your kubernetes\n\n      # manifests at deployment time.\n\n      values: {}\n\n\n\n    # This property allows you to define environment variables that can be injected into your\n\n    # container at runtime (or when running locally in docker).\n\n    env:\n\n      SOME_ENV_VAR: \"Environment variable in qa\"\n\n\n\n    # This property allows you to define arbitrary config files that can be automatically injected\n\n    # into your container at runtime (or when running locally in docker).\n\n    configFile:\n\n      # This property can contain any arbitrary structure, and can reference secrets.\n\n      data:\n\n        someProperty: \"Config value for qa\"\n\nNote that this is a YAML file which defines a tree of properties for one or more apps. Within each app, it contains configuration of an app, from a high-level, developer-centric perspective (how to build it, deploy it, provide it with runtime configuration, etc).\n\nWHAT IS \"APPS.MAIN\"?\n\ndex config supports multiple apps within a repo (i.e. so you can create a monorepo), but most dex repos just have one app with the default name main.\n\nThe file dex/config/qa.yaml defines the environment qa, which in this example, deploys to the AWS account 0123456789.\n\nWHAT DO YOU MEAN BY \"ENVIRONMENT\" IN DEX?\n\nIn dex, environments are defined as files in the dex/config directory (e.g. qa.yaml, stg.yaml), and can inherit from one another (e.g. dev.yaml inherits from qa.yaml).\n\nYou can have multiple dex environments that all live in the same AWS account. In this project, both qa and dev are in the same AWS account:\n\nThe qa environment is a shared, static integration environment. It would probably reflect the latest version of your app from the main branch.\n\nThe dev environment is an \"ephemeral\" environment that an individual developer can use to test work in progress. In kubernetes, the app's namespace is suffixed with the developer name, to keep it isolated from other developers.\n\nThe environment that will be used when you run dx commands is determined by the environment variable DEX_ENV, and the default value locally is dev.\n\nThat means that for this tutorial, we'll be running all commands against the dev environment. When we deploy to kubernetes, we'll get our own private namespace: dex-tutorial-{your username}.\n\nNow let's check the actual coalesced configuration tree for the dev environment (which combines dev.yaml, qa.yaml, and project.yaml):\n\ndx config\n\nThis will print your configuration for the current environment in a nice, readable format, along with generated and default values, with some helpful context information about where certain values came from.\n\nNotice at the top it tells us: Config for DEX_ENV: dev. This verifies the current dex \"environment\" is dev.\n\nWhat's wrong with just using .env files?\n\nSimilar to the .env file, dex config files allow you to define runtime configuration. However, dex configuration has some big advantages over .env files:\n\nYou can run locally in docker, natively, or in Kubernetes, but you only have to define your runtime config in one place\n\nYou can define multiple environments using multiple dex config files, with an inheritance structure to reduce duplication\n\nYou can reference secrets from AWS Parameter store\n\nYou can define configuration values dynamically with generator expressions\n\nMove configuration into dex config files\n\nAs we've learned, the sample app expects all configuration to be provided via environment variables, so we don't need to make any changes to the app itself.\n\nLet's translate the .env file into dex configuration, into the apps.main.env section of the config tree.\n\nWe want to have the same runtime configuration between the qa and dev environments, so we'll update dex/config/qa.yaml and copy in the environment variables from .env:\n\ndex/config/qa.yaml\n\napps:\n\n  main:\n\n    # ...\n\n    env:\n\n      SOME_PROPERTY: 'some property value'\n\n      DATABASE_USERNAME: 'fake username from config'\n\n      DATABASE_PASSWORD: 'fake password from config'\n\nWHAT IS THAT \"CONFIGFILE\" SECTION?\n\nWhen you ran dx scaffold, it created the dex/config files with both apps.main.env and apps.main.configFile sections.", "start_char_idx": 6619, "end_char_idx": 11172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b0ee5c6-6a7f-4663-aabe-f935c1b2f594": {"__data__": {"id_": "3b0ee5c6-6a7f-4663-aabe-f935c1b2f594", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cecb7494-107b-4454-baa2-12a4bbcd153b", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "c20249e49aa6c3c07d987195abf0962230f00600e847fce6316b3d43b38d4608", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "867e037a-e9a0-4a26-b3f2-3c45dcb05611", "node_type": "1", "metadata": {}, "hash": "18edc42dcdc2f7680f6159afbdea2d6a9072f4579b291ad7ac1e4210e0a17296", "class_name": "RelatedNodeInfo"}}, "hash": "cad413942febf61e2c2102f80ba83be8f08e50b0310bc43bb8fe4d2d2ca9d833", "text": "Let's translate the .env file into dex configuration, into the apps.main.env section of the config tree.\n\nWe want to have the same runtime configuration between the qa and dev environments, so we'll update dex/config/qa.yaml and copy in the environment variables from .env:\n\ndex/config/qa.yaml\n\napps:\n\n  main:\n\n    # ...\n\n    env:\n\n      SOME_PROPERTY: 'some property value'\n\n      DATABASE_USERNAME: 'fake username from config'\n\n      DATABASE_PASSWORD: 'fake password from config'\n\nWHAT IS THAT \"CONFIGFILE\" SECTION?\n\nWhen you ran dx scaffold, it created the dex/config files with both apps.main.env and apps.main.configFile sections. This is because dex has two ways to inject runtime configuration into your app:\n\nIt can set environment variables\n\nIt can write out a JSON config file and mount it in your container\n\nSince our dex-tutorial app uses environment variables (not a JSON config file) for runtime configuration, we'll just use the apps.main.env section. You can delete the whole apps.main.configFile section.\n\nThen, lets re-run dx config to check that the env section is showing up:\n\ndx config\n\nOnce you've verified the env section is correctly showing up, let's delete the .env file from the repo to keep things clean.\n\nBuilding and running your container locally\n\nNow we're ready to build your container and run it locally.\n\nThe repo already has a Dockerfile; open it up and check it out. Then, use it to build your app's container image by running:\n\ndx build\n\nThen let's run it:\n\ndx run\n\nIn your terminal, you should see the same JSON logging output from the app. Let's verify the app looks the same as it did when we were running it natively: http://localhost:4999.\n\nWHAT IS DEX DOING IN THERE?\n\nUnder the hood, the dx run command called docker run, passing all the configuration variables as -e arguments.\n\nIf you had used the configFile feature in your config, dex would have additionally written a config file to .config/config.json, and mounted it in your container.\n\nCool, the app is running in Docker, and you can see the config values we added!\n\nBuilding and running natively\n\nRunning in Docker is great, but you may also want to run natively. Since dex doesn't really know anything about running apps natively (it's centered around containers), we need to create a project-defined command to override the default dex build and run command implementations, and add a few lines of code to call the node-specific build and run commands.\n\nLuckily, since node.js is a top-tier platform for dex, the scaffolding command we ran earlier has already generated a node.js overrides for the build and run commands!\n\nLet's take a look at the build command: dex/commands/build.ts. Note that we've defined a --host flag, and that the command() function has an if block switching on the args.host parameter. This means if you run dx build --host, the code inside that if block will be called. As you can see, they just shell out to the idiomatic node.js build command: npm run build.\n\nLets try it:\n\ndx build --host\n\nCool, we ran the TypeScript compilation step via dx!\n\nNow, check out the dex/commands/run.ts file. It's pretty similar, except it calls a couple dex APIs before running the idiomatic node.js start command (npm run start):\n\nawait renderConfigFiles();\n\nawait loadEnv();\n\nThese two functions (via the dex TypeScript API) help make config from your dex config files available to your app when running natively.\n\nrenderConfigFiles() renders out a JSON config file and/or .env file to load into your app for runtime configuration.\n\nloadEnv() loads the environment variables in your config env section into the current process, so the will be inherited by the child process when running npm run start.\n\nNext, lets run the app natively. The exact same principles have been applied to the dex/commands/run.ts project-defined commands, so it also has a --host flag:\n\ndx run --host\n\nYou should see the app running just as before, with the config values visible in a browser.\n\nEnable native debugging\n\nCool, your app is now using configuration from dex both in Docker, and natively. But what about when using the debugger?\n\nBefore we debug locally, we want to make sure our app has the latest version of its runtime configuration from the apps.main.env property in our dex config files. When we're running via the dx run command, the config gets rendered automatically. If we're using the debugger in vscode, we'll need to explicitly call the dx render-config command each time we change a runtime config value.\n\nGood news: we can do this automatically!", "start_char_idx": 10536, "end_char_idx": 15103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "867e037a-e9a0-4a26-b3f2-3c45dcb05611": {"__data__": {"id_": "867e037a-e9a0-4a26-b3f2-3c45dcb05611", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3b0ee5c6-6a7f-4663-aabe-f935c1b2f594", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "cad413942febf61e2c2102f80ba83be8f08e50b0310bc43bb8fe4d2d2ca9d833", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2f712e8-d623-475d-ae04-e693bcd7c35c", "node_type": "1", "metadata": {}, "hash": "1f02d6c96df2c1eeac19880a1d28c256e08fa185f12b3aec1e8edaa9a6a78a86", "class_name": "RelatedNodeInfo"}}, "hash": "18edc42dcdc2f7680f6159afbdea2d6a9072f4579b291ad7ac1e4210e0a17296", "text": "Next, lets run the app natively. The exact same principles have been applied to the dex/commands/run.ts project-defined commands, so it also has a --host flag:\n\ndx run --host\n\nYou should see the app running just as before, with the config values visible in a browser.\n\nEnable native debugging\n\nCool, your app is now using configuration from dex both in Docker, and natively. But what about when using the debugger?\n\nBefore we debug locally, we want to make sure our app has the latest version of its runtime configuration from the apps.main.env property in our dex config files. When we're running via the dx run command, the config gets rendered automatically. If we're using the debugger in vscode, we'll need to explicitly call the dx render-config command each time we change a runtime config value.\n\nGood news: we can do this automatically! Let's create some vscode \"tasks\" that we can trigger before debugging to compile typescript and call dx render-config automatically:\n\n.vscode/tasks.json\n\n{\n\n    \"version\": \"2.0.0\",\n\n    \"tasks\": [\n\n        {\n\n      \"label\": \"tsc: build\",\n\n            \"type\": \"typescript\",\n\n            \"tsconfig\": \"src/tsconfig.release.json\",\n\n            \"problemMatcher\": [\n\n                \"$tsc\"\n\n            ]\n\n        },\n\n        {\n\n            \"label\": \"dx: render-config\",\n\n            \"type\": \"shell\",\n\n            \"command\": \"dx render-config\",\n\n            \"problemMatcher\": []\n\n        },\n\n        {\n\n            \"label\": \"pre-run\",\n\n            \"dependsOn\": [\n\n                \"dx: render-config\",\n\n                \"tsc: build\"\n\n            ]\n\n        }\n\n    ]\n\n}\n\nNow, let's update our .vscode/launch.json to configure the debugger to use the pre-run task we just created, and use the .env file it creates:\n\n.vscode/launch.json\n\n{\n\n    \"version\": \"0.2.0\",\n\n    \"configurations\": [\n\n        {\n\n            \"type\": \"node\",\n\n            \"request\": \"launch\",\n\n            \"name\": \"Launch Program\",\n\n            \"skipFiles\": [\n\n                \"<node_internals>/**\"\n\n            ],\n\n            \"preLaunchTask\": \"pre-run\",\n\n            \"program\": \"${workspaceFolder}/dist/server.js\",\n\n            \"envFile\": \"${workspaceFolder}/.config/.env\",\n\n            \"outFiles\": [\n\n                \"${workspaceFolder}/**/*.js\"\n\n            ],\n\n            \"console\": \"integratedTerminal\"\n\n        }\n\n    ]\n\n}\n\nOK, now lets run the app via the debugger. Put a breakpoint in the startup() method of src/server.ts, and select Run -> Start Debugging in the vscode menu.\n\nIf your breakpoint gets hit, you've got it working!\n\nAdding secrets\n\nIn the sample repo, we have config values for DATABASE_USERNAME and DATABASE_PASSWORD, for which real credentials should obviously not be put into source control.\n\nLet's create two parameters in AWS Systems Manager Parameter Store, and store values for these properties there.\n\nLog into the AWS console for your team's QA account\n\nIn the top navigation search bar, type \"Parameter Store\"\n\nIn the resulting search dropdown, under \"Features\", select \"Parameter Store\" (which is a sub-feature of Systems Manager)\n\nClick the \"Create parameter\" button at the top of the \"My parameters\" table\n\nFor Name, type /dex-tutorial/{your-username}/database/username\n\nFor Type, select \"SecureString\"\n\nFor value, enter \"fake username from secret\"\n\nRepeat the process to create another secret for /dex-tutorial/{your-username}/database/password\n\nUsing secrets in configuration\n\nNext, let's replace the hard-coded secret values in dex/config/qa.yaml with references to these parameter store secrets:\n\ndex/config/qa.yaml\n\n...", "start_char_idx": 14258, "end_char_idx": 17827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2f712e8-d623-475d-ae04-e693bcd7c35c": {"__data__": {"id_": "f2f712e8-d623-475d-ae04-e693bcd7c35c", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "867e037a-e9a0-4a26-b3f2-3c45dcb05611", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "18edc42dcdc2f7680f6159afbdea2d6a9072f4579b291ad7ac1e4210e0a17296", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "955129c8-b265-4bb6-bf75-512cc6926fb7", "node_type": "1", "metadata": {}, "hash": "d2b620158ae9ea3dfc02877bcb23699e109531ac5a3c32e7e54131986917d38e", "class_name": "RelatedNodeInfo"}}, "hash": "1f02d6c96df2c1eeac19880a1d28c256e08fa185f12b3aec1e8edaa9a6a78a86", "text": "Let's create two parameters in AWS Systems Manager Parameter Store, and store values for these properties there.\n\nLog into the AWS console for your team's QA account\n\nIn the top navigation search bar, type \"Parameter Store\"\n\nIn the resulting search dropdown, under \"Features\", select \"Parameter Store\" (which is a sub-feature of Systems Manager)\n\nClick the \"Create parameter\" button at the top of the \"My parameters\" table\n\nFor Name, type /dex-tutorial/{your-username}/database/username\n\nFor Type, select \"SecureString\"\n\nFor value, enter \"fake username from secret\"\n\nRepeat the process to create another secret for /dex-tutorial/{your-username}/database/password\n\nUsing secrets in configuration\n\nNext, let's replace the hard-coded secret values in dex/config/qa.yaml with references to these parameter store secrets:\n\ndex/config/qa.yaml\n\n...\n\n\n\n  env:\n\n    SOME_PROPERTY: 'some property value'\n\n    DATABASE_USERNAME: '@secret /dex-tutorial/{your-username}/database/username'\n\n    DATABASE_PASSWORD: '@secret /dex-tutorial/{your-username}/database/password'\n\nThen, lets run dx config again to check that the secrets have been read:\n\ndx config\n\nNote that the values of the secrets now show in red as:\n\nenv:\n\n  DATABASE_USERNAME: (unavailable) (@secret /dex-tutorial/gracehopper/database/username, runtime only)\n\n  DATABASE_PASSWORD: (unavailable) (@secret /dex-tutorial/gracehopper/database/password, runtime only)\n\nThis is because, by default, dex will not pull secrets from AWS; this is to force you to think carefully about whether the secrets are appropriate to have on a local developer laptop.\n\nIMPORTANT\n\nBefore you use any real secrets for local development, it's really important to read our doc section on runtime secrets, which will help you choose the right way to manage secrets on a local laptop.\n\nIn this case, we're going to pretend that we've verified these secrets are safe to download to our laptops. To do this, we can use the command:\n\ndx cache-secrets\n\n(which will pull the secrets into a local cache file at: .tmp/offline.json, but this is transparent to you).\n\nThen, re-run the dx config command again:\n\ndx config\n\nNow the secrets are showing up in yellow (indicating that they're being pulled dynamically), and masked. If you want to validate the actual values:\n\n# -s | --show-secrets\n\ndx config -s\n\nNow let's run the app and see how it's working with the secrets:\n\ndx run\n\nGo ahead and open a browser to http://localhost:4999, and verify that the \"secrets\" are showing up.\n\nLet's try the same thing natively:\n\ndx run --host\n\nNice! Secrets are now being provided via 12-factor goodness!\n\nSetting up your kubernetes deployment\n\nIt's time to deploy our app to Kubernetes!\n\ndex uses standard Kubernetes \"manifests\": YAML/JSON files that describe your app in terms of high-level Kubernetes objects (e.g. Deployment, Service, Ingress, etc). These manifests go in dex/manifests by default, and our project got a boilerplate Deployment.yaml manifest when we called dx scaffold.\n\nGo ahead and take a look at dex/manifests/Deployment.yaml (though you don't need to make any changes to it now).\n\nWHAT IS A DEPLOYMENT?\n\nThis is a sort of wrapper object which defines the Pod that will house your application container, configuration and secret injection, health checks, resource limits, and other features of managing your container at runtime. The Deployment wrapper manages how your application is actually deployed (i.e. zero-downtime rollout as new versions are deployed) and its scaling properties (i.e. number of pod \"replicas\" that should be deployed).\n\nChoosing your ingress\n\nConfiguring Ingress (how your app is exposed outside of the cluster) along with DNS and TLS certs is complicated in Kubernetes, but dex takes care of this for you. Open up your dex/config/project.yaml, and check out apps.main.kubernetes.ingressType:\n\ndex/config/project.yaml\n\napps:\n\n  main:\n\n    # ...\n\n    kubernetes:\n\n      # TODO: Put your application port here.\n\n      # Consider choosing a high, unusual port number so that your app's port\n\n      # will be unique when running lots of containers port-mapped on localhost.\n\n      containerPort: 4999", "start_char_idx": 16986, "end_char_idx": 21136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "955129c8-b265-4bb6-bf75-512cc6926fb7": {"__data__": {"id_": "955129c8-b265-4bb6-bf75-512cc6926fb7", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2f712e8-d623-475d-ae04-e693bcd7c35c", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "1f02d6c96df2c1eeac19880a1d28c256e08fa185f12b3aec1e8edaa9a6a78a86", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a081681-d577-4656-9758-87ac2f7c309d", "node_type": "1", "metadata": {}, "hash": "7ca676cbbfe151bd05f012a36ffce177f9790ea78baf1431dfcb3852d4385783", "class_name": "RelatedNodeInfo"}}, "hash": "d2b620158ae9ea3dfc02877bcb23699e109531ac5a3c32e7e54131986917d38e", "text": "# This allows you to choose the way your application is exposed\n\n      ingressType: \"internalIngressAndService\"\n\ncontainerPort tells dex and Kubernetes what port your container will be listening on. This has to match the port your code actually uses!\n\ningressType is an enumeration of options for all the valid ways to expose your service (e.g. internal, external, both internal and external).\n\nWHY A UNIQUE, HIGH PORT NUMBER?\n\nFor two reasons:\n\nLinux default security settings prohibit non-root apps from binding to ports under 1024.\n\nWhen you're running a bunch of apps natively, only one app can bind to a specific port. Having them unique per service makes local development a lot easier.\n\nWe're ready to deploy!\n\nLet's go ahead and deploy to our dev environment!\n\nREMINDER\n\nWhen we deploy to the dev environment, it's going to create an isolated environment that is suffixed with your username, so you can deploy without fear!\n\n# Push your container image to ECR\n\ndx push\n\n\n\n# Deploy to Kubernetes\n\ndx deploy\n\n\n\n# OR, do dx build, push, deploy all in one shot:\n\n# The -k (--kube) flag means run in Kubernetes!\n\ndx run -k\n\nCheck out your app\n\nIf all went well, the dx deploy (or dx run -k) command printed out the URL of your new deployment. Lets put this link in a browser and check out your app!\n\nopen https://dex-tutorial-dev-gracehopper.eks.int.us-east-1.qa.devops.ss42.net\n\nHOW DID I GET HTTPS WORKING SO EASILY?\n\nNote that HTTPS works, using a wildcard certificate that has already been configured for your EKS cluster!\n\nWildcard certificates are allowed on a domain that doesn't have the word \"simplisafe\" in it, so we use this for ephemeral developer environments and feature branch environments.\n\nIn all other environments, such as shared integration environments (i.e. in qa), or in stg or prd, non-wildcard certificates for your app's specific hostname will be automatically created by dex at deployment time.\n\nLooking at your app in Kubernetes\n\nLOGGING INTO KUBERNETES\n\nThe previous command dx deploy logged you into kubernetes automatically using the AWS credentials specified in your dex config file for the current environment. Now you can run commands with kubectl in the same context that dex ran its commands.\n\nYou can also log in explicitly with dx cluster-login.\n\nAt this point, you can check out your app using kubectl (or your favorite kubernetes UI, such as k9s or OpenLens:\n\nkubectl get deploy\n\nYou should see your deployment:\n\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\n\ndex-tutorial       1/1     1            1           2m\n\nNOTE\n\nBecause we used dx deploy in the dev environment, you should see your username appended to the name of your app. This is how dex allows you to create ephemeral developer environments, and is useful for you to test your app in a production-like environment.\n\nYou can drill down into pods, services, and ingresses as well:\n\nkubectl get pod\n\nNAME                             READY   STATUS    RESTARTS   AGE\n\ndex-tutorial-778fd944c8-6bznk    1/1     Running   0          2m\n\nTIP\n\nkubectl is fairly easy to learn, given that it has a few basic commands that operate similarly on most objects.\n\nHere's a nice tutorial: https://kubernetes.io/docs/reference/kubectl/overview/\n\nCheck out your app in a browser!\n\nWhen you ran dx deploy, you may have noticed that it printed out a banner after a successful deployment with the URL of the app's ingress:\n\nWaiting for deployment \"dex-tutorial\" rollout to finish: 1 of 2 updated replicas are available...\n\ndeployment \"dex-tutorial\" successfully rolled out\n\n\n\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n   \u2502                                                                               \u2502\n\n   \u2502   Your app should be available at:                                            \u2502\n\n   \u2502                                                                               \u2502\n\n   \u2502   https://dex-tutorial-dev-gracehopper.eks.int.us-east-1.qa.myteam.ss42.net   \u2502\n\n   \u2502                                                                               \u2502\n\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "start_char_idx": 21146, "end_char_idx": 25317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a081681-d577-4656-9758-87ac2f7c309d": {"__data__": {"id_": "6a081681-d577-4656-9758-87ac2f7c309d", "embedding": null, "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77f6664f-dba8-4710-bdda-6968fb42f191", "node_type": "4", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "779c4411f05b4b7c32448f4fc4b2871c855a79239a8a12f0485f7650c5c9292c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "955129c8-b265-4bb6-bf75-512cc6926fb7", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "d2b620158ae9ea3dfc02877bcb23699e109531ac5a3c32e7e54131986917d38e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5137ef90-764c-414b-b9e1-e43e4fa304e3", "node_type": "1", "metadata": {}, "hash": "323f60c9f67887416437b433c5ff822e81b9d24df22cfc724587394d24f8d5ce", "class_name": "RelatedNodeInfo"}}, "hash": "7ca676cbbfe151bd05f012a36ffce177f9790ea78baf1431dfcb3852d4385783", "text": "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n   \u2502                                                                               \u2502\n\n   \u2502   Your app should be available at:                                            \u2502\n\n   \u2502                                                                               \u2502\n\n   \u2502   https://dex-tutorial-dev-gracehopper.eks.int.us-east-1.qa.myteam.ss42.net   \u2502\n\n   \u2502                                                                               \u2502\n\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\nDeployment completed successfully\n\nThis is the external URL of your service, and was assigned to your app's ingress object. You can see this using kubectl:\n\nkubectl get ingress\n\nNAME           HOSTS                                                              ADDRESS                                                                            PORTS   AGE\n\ndex-tutorial   dex-tutorial-dev-gracehopper.eks.int.us-east-1.qa.devops.ss42.net  internal-ae5bce6007fab4501b3044669ee8c524-1482013065.us-east-1.elb.amazonaws.com   80      8d\n\nHow does this Deployment have my username on it?\n\nSo how did this deployment get a unique namespace and URL, each suffixed with your username? To answer this, lets take a quick peek at the dev environment config file: dex/config/dev.yaml:\n\ndex/config/dev.yaml\n\ninheritFrom: qa\n\napps:\n\n  main:\n\n    containerImage:\n\n      tag: \"@generator developer.tag()\"\n\n    kubernetes:\n\n      namespace: \"@generator developer.namespace()\"\n\n      deleteAfterDays: 7\n\nThe trick here is a dex feature called config generators. A generator is a bit of TypeScript code that can be used to generate config values dynamically, based on inputs such as environment variables.\n\nIn this case, the scaffolding set up your dev environment using the developer generator, which reads from environment variables, determines that you're not a CI/CD server, and then generates a container image tag and Kubernetes namespace name based on the app name and your username.\n\nThere's no magic here, and nothing special about how dex thinks about the dev environment versus other environments; it's just configuration that you ultimately control.\n\nNOTE\n\nAlso note the deleteAfterDays property. This is what makes an environment ephemeral instead of static. Again: no magic!\n\nCleaning up\n\nWhen you're done with your ephemeral environment, you can clean it up with:\n\ndx destroy\n\nThat will delete all the objects you deployed, including the Ingress and Service, as well as the Deployment and any Pods it created.\n\nNext steps\n\nCongratulations! You've learned the basics of dex!\n\nWhen you work with dex on a real project, you'll want to learn more about these topics:\n\nSetting up CI/CD pipelines\n\nCreating tests\n\nConfiguring runtime permissions for your app\n\nLearn about how secret injection works in Kubernetes\n\nYou can always get support for dex in the slack channel #dex-support!", "start_char_idx": 24720, "end_char_idx": 27693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5137ef90-764c-414b-b9e1-e43e4fa304e3": {"__data__": {"id_": "5137ef90-764c-414b-b9e1-e43e4fa304e3", "embedding": null, "metadata": {"file_path": "training_data/dct_project.txt", "file_name": "dct_project.txt", "file_type": "text/plain", "file_size": 4270, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d20b4680-fa3c-4923-bc5d-806800227fce", "node_type": "4", "metadata": {"file_path": "training_data/dct_project.txt", "file_name": "dct_project.txt", "file_type": "text/plain", "file_size": 4270, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "d4bc639197d7213c8b11e82eaed653481dcf89bea947fead23327cdfc5278d51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a081681-d577-4656-9758-87ac2f7c309d", "node_type": "1", "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "7ca676cbbfe151bd05f012a36ffce177f9790ea78baf1431dfcb3852d4385783", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a90a6ca-26f0-4c74-b472-c49698db3398", "node_type": "1", "metadata": {}, "hash": "da1e73022b914fe76544986dc3192cf50a40acc25acda69240b90510474bef9d", "class_name": "RelatedNodeInfo"}}, "hash": "323f60c9f67887416437b433c5ff822e81b9d24df22cfc724587394d24f8d5ce", "text": "\ufeffDCT - Drupal to CommerceTools\nProject space for the DCT OMS Order form project. Our goal is replace the Order management, slicing functionality off from Ubercart.\nThe project consists of a hosted iframe react application replacing the create order screen in Drupal. The react application uses Auth0 for authentication and those credentials are passed to the backend services in place of x-vid-token where required.\nPhases of the project\nPhase 1 (In progress):\nAccept phone orders entered via CSR\u2019s and authorize payment to ready the order for fulfillment\nOrders continue to flow into Drupal and are considered authoritative for fulfillment\nAs part of this we will enable:\n* Fetching products from Commercetools including:\n   * Components\n   * Systems\n   * Permits\n   * Service Plans\n   * Replacement parts\n   * Using products created in Drupal but using product sync to import into Commercetools\n* Fetching discount codes from Commercetools\n   * Using coupon codes created in Drupal but using promotion sync to load Commercetools\n* Implementing Zuora iframe in the React application for order authorization\n* UX/UI Improvements for order management\n* New customers are created in both Commercetools and Drupal\n   * Leads are inserted via ecomm-leads\nPhase 2 (Not exhaustive):\n* Orders continue to flow into Drupal but are not considered authoritative\n* Order edits are made to the Commercetools Order object and then flow down into Drupal\n   * Orders not present or updated after placement will be sync\u2019d \u201cjust in time\u201d to Commercetools\n* Order refunds are processed using Commercetools\n* Products are created in Commercetools\n   * Drupal will need products until reporting can be moved\n   * Prices are not considered authoritative for reporting purposes if we want to enable price testing\n* Promotions are created in Commercetools\n* Enable price testing and changes in Commercetools\nPhase 3 (High level, pending stakeholder sign-off):\n* Fulfillment is done via Order objects in Commercetools\n* Order splitting is handled with multiple shipments in Commercetools\n* Reporting can be done via BI data fed from Commercetools\n* Order data in Drupal is non-authoritative, products no longer need to be created in Drupal\n   * The First Order no longer sync\u2019s orders to Drupal\nRepositories:\nsimplisafe/eis-orders-frontend  - EIS Orders Frontend is our react application to be hosted inside Drupal. This interacts with the EIS/Ecomm apis to facilitate order creation and management\nsimplisafe/eis-orders  - EIS Orders is a replacement for ecomm-orders which handles payments, pre-activation, TFO proxy, and order persistence / placement, converting the \u201ccart\u201d to an order\nsimplisafe/ecomm-users-api  - Handles user management to bridge between Drupal and Commercetools. Is responsible for merging customer profiles between Drupal and Commercetools and adding user data to Commercetools\nUtilized Ecomm Services:\nsimplisafe/ecomm-product-sync - Syncs products from Drupal to Commercetools. In phase two of our project, we\u2019ll be turning this off and making Commercetools the source of product data for ecommerce\nsimplisafe/eis-promotions  - Syncs promotions from Drupal to Commercetools. In phase two of our project, we\u2019ll be turning this off and making Commercetools the source of promotions data for e-commerce including the creation and management of coupons\nsimplisafe/ecomm-carts-api - Creates and manages carts which are converted to orders and via The First Order are deposited back into Drupal\nsimplisafe/ecomm-promotions-api - The bridge between the frontend and Commercetools discounts. This service will enable querying for Discount Codes for the CRM to enable typeahead\nsimplisafe/ecomm-orders  - Used to convert carts to orders and start the sync process for orders into Drupal\nsimplisafe/simplisafe.com - The main repository that runs the OMS and the former e-commerce website.\nsimplisafe/ecomm-payments - Responsible for creating payment profiles and rendering the payment collection application within our frontend application. Integrates with Zuora\nsimplisafe/ecomm-leads - Used to insert new leads into the ss_leads table as well as\nsimplisafe/subspace-transceiver for deduplication and Braze", "start_char_idx": 0, "end_char_idx": 4200, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a90a6ca-26f0-4c74-b472-c49698db3398": {"__data__": {"id_": "4a90a6ca-26f0-4c74-b472-c49698db3398", "embedding": null, "metadata": {"file_path": "training_data/dct_setup_guide.txt", "file_name": "dct_setup_guide.txt", "file_type": "text/plain", "file_size": 1468, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6ead7c8-d59c-45af-91a9-ba2d8c243846", "node_type": "4", "metadata": {"file_path": "training_data/dct_setup_guide.txt", "file_name": "dct_setup_guide.txt", "file_type": "text/plain", "file_size": 1468, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "1aa383c0be21a54404521050bbae5847dfbff4c4a0bdc1ef4b1b7b50a57efe74", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5137ef90-764c-414b-b9e1-e43e4fa304e3", "node_type": "1", "metadata": {"file_path": "training_data/dct_project.txt", "file_name": "dct_project.txt", "file_type": "text/plain", "file_size": 4270, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "323f60c9f67887416437b433c5ff822e81b9d24df22cfc724587394d24f8d5ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ca274a9-b6c5-4ad6-9fb0-bbcf28e4b6a9", "node_type": "1", "metadata": {}, "hash": "6cfba2b04b3be293ff2000be28ddaf1ee4fca58765f86dbfa752785eccf42899", "class_name": "RelatedNodeInfo"}}, "hash": "da1e73022b914fe76544986dc3192cf50a40acc25acda69240b90510474bef9d", "text": "\ufeffThis guide is here to help you easily get started and work smoothly in our DCT project. Brief description about DCT and Repos is mentioned here.\nAccess\n* Request access for Commercetools, Contentful from Lumos via Okta Tile\n* Request access for ecomm-qa-poweruser in AWS through Lumos\n* Request access for Orders Manager and Orders Administrator in #support-auth0 slack channel. Make sure you ask for d2ct role too. Without this role, the new React application in Drupal will not be visible\nGithub Repos\n1. Before proceeding, ensure Drupal is running locally. Follow the steps in the provided document to set up Drupal locally.\n2. Clone the eis-orders-frontend repo. Follow the instructions in the README file to set up the project locally.\n3. Once both steps above are completed, run the eis-orders-frontend project. Refresh the local Drupal CRM and start creating a new order.\nRepos Setup\n1. eis-orders\n   1. Setup this repo by following the steps in the README file.\n2. the-first-order\n   1. The default QA environment file in the repository will connect to the QA Drupal instance and the \"simplisafe-dev-1\" Commercetools project (our QA environment) when operating on your localhost.\n   2. Some errors leaving comments are normal, as the generated order_id may not exist in the QA environment.\n   3. To overcome this, run the-first-order locally and point your React frontend environment at it: REACT_APP_ORDERS_API_BASE_URL=http://localhost:3093", "start_char_idx": 0, "end_char_idx": 1451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ca274a9-b6c5-4ad6-9fb0-bbcf28e4b6a9": {"__data__": {"id_": "3ca274a9-b6c5-4ad6-9fb0-bbcf28e4b6a9", "embedding": null, "metadata": {"file_path": "training_data/drupal_setup_guide.txt", "file_name": "drupal_setup_guide.txt", "file_type": "text/plain", "file_size": 2009, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca202dba-bbab-457f-b237-8c3fc683fe52", "node_type": "4", "metadata": {"file_path": "training_data/drupal_setup_guide.txt", "file_name": "drupal_setup_guide.txt", "file_type": "text/plain", "file_size": 2009, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "882755c8ef850e8cfdf80b4fb26d75f1cc23d81200af3bd65c876effc5f351d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a90a6ca-26f0-4c74-b472-c49698db3398", "node_type": "1", "metadata": {"file_path": "training_data/dct_setup_guide.txt", "file_name": "dct_setup_guide.txt", "file_type": "text/plain", "file_size": 1468, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "da1e73022b914fe76544986dc3192cf50a40acc25acda69240b90510474bef9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bf7f3f9-0b60-4043-859a-191103855463", "node_type": "1", "metadata": {}, "hash": "8c428c04cf059d66545f952ee6afb58906901f61a8bd1fecddf4d78623ba0891", "class_name": "RelatedNodeInfo"}}, "hash": "6cfba2b04b3be293ff2000be28ddaf1ee4fca58765f86dbfa752785eccf42899", "text": "\ufeffPrerequisite:\n* Install Docker\nMajor Steps :\n* Follow the setup instructions from the dev_setup repository.\n* Add host entries to your /etc/hosts file:\n127.0.0.1 local.simplisafe.com\n* * 127.0.0.1 local.simplisafe.co.uk\n* Setup & Init your AWS profile for Docker Login\n* AWS_PROFILE=ops-qa-service-01-saml-admin aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 610626586058.dkr.ecr.us-east-1.amazonaws.com\n      replace ops-qa-services-01-saml-admin with your ~/.aws/config AWS_PROFILE.\n\n* Docker Pull Mysql Docker-Image\n* docker pull 610626586058.dkr.ecr.us-east-1.amazonaws.com/ops_mysql_dev:latest\n* cd simplisafe.com (repo) & run below contractor cmd\ndocker-compose -f docker-compose.contractor.yml up -d\n* \n\n* if above cmd fails due to permission issue run this instead :\n* \n\n* * sudo docker-compose -f docker-compose.contractor.yml up -d ( use this above one fails due to permission issue)\n* Check logs if Drupal is running :\n* docker-compose logs -f drupal\n* Now open https://local.simplisafe.com/\nCommon Errors :\n1. Verify If Container/docker is running fine\n\n\n2. If Web is coming blank on https://local.simplisafe.com/  or getting autoload.php type of error/msg\ntry below steps\ndocker exec -e COLUMNS=\"`tput cols`\" -e LINES=\"`tput lines`\" -ti drupal bash (basically SSH to local Docker Container)\n   3. cd /var/www/simplisafe.com \n   4. composer install\n   5.    6. (exit the bash console & try now!!)\n   7. If getting mysql.inc or any kind of SQL error  then Check MariadDB Container IPAddress\nin this case it\u2019s : 172.20.0.6\n\n\nAnd Set settings.php  as below :\n$db_url['default'] = 'custommysql://root:@172.20.0.6/simplisafe_DEV';\n      4. If Setting up New Api Call (not related to setup)\ndocker exec -e COLUMNS=\"`tput cols`\" -e LINES=\"`tput lines`\" -ti drupal bash (basically SSH to local Docker Container)\n      5. cd /var/www/simplisafe.com/public_html\n      6.       7. drush cc all (clear routes cache)", "start_char_idx": 0, "end_char_idx": 1962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bf7f3f9-0b60-4043-859a-191103855463": {"__data__": {"id_": "8bf7f3f9-0b60-4043-859a-191103855463", "embedding": null, "metadata": {"file_path": "training_data/xwing_deployment_process.txt", "file_name": "xwing_deployment_process.txt", "file_type": "text/plain", "file_size": 2903, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2373593-dac7-4074-be12-eda8f197456b", "node_type": "4", "metadata": {"file_path": "training_data/xwing_deployment_process.txt", "file_name": "xwing_deployment_process.txt", "file_type": "text/plain", "file_size": 2903, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "82066a4b98bca8dd743169513168cd56cc69c176f03baa9729ac437f4f7da835", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ca274a9-b6c5-4ad6-9fb0-bbcf28e4b6a9", "node_type": "1", "metadata": {"file_path": "training_data/drupal_setup_guide.txt", "file_name": "drupal_setup_guide.txt", "file_type": "text/plain", "file_size": 2009, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}, "hash": "6cfba2b04b3be293ff2000be28ddaf1ee4fca58765f86dbfa752785eccf42899", "class_name": "RelatedNodeInfo"}}, "hash": "8c428c04cf059d66545f952ee6afb58906901f61a8bd1fecddf4d78623ba0891", "text": "\ufeffThis document outlines a step-by-step guide for deploying the X-Wing application across different environments\u2014QA, STG, and PRD. It provides detailed instructions for merging a pull request (PR) in the support_tools GitHub repository, retrieving the SHA for deployment, and initiating the deployment process through the GoCD application.\nGitHub Repository - support_tools :\n1. Navigate to the GitHub repository support_tools.\n2. Click on the top bar displaying all commits (e.g., 576 commits in the screenshot).\n3. Access the commits page to identify the latest merge commit.\n4. Copy the SHA of the merged branch for further reference.\nGoCD Deployment:\nEnsure access to the GoCD application via the Okta portal.\nDeployment Steps:\n \nPRD Environment:\n1. Access prd_xwing_deploy on the GoCD dashboard.\n2. Click on the PlayPlus button.\n3. It will display pop-up dialog which are attached below. In the first image, the Revision to trigger with offers a drop-down menu with the 5 most recent commits in the tf-xwing GitHub repo.  You must enter the most recent commit hash from the tf-xwing repo, either by choosing it from the drop-down menu, or by entering the hash manually into the text box.  (You can verify the most recent commit in that repo\u2019s commits page here.) Failure to choose the most recent commit from tf-xwing may cause some users to be blocked from accessing the Xwing application.\nIn the same dialog box, click the Environment Variables tab, as shown in the 2nd screenshot below.  You will paste the copied github SHA from support-tools repo of merged branch.\n3. If you are not able to find the latest git hash for terraform-xwing in the dropdown, then you can refer to github repo of tf-xwing to verify the hash and pick that accordingly.\n4. After verifying all the details, now click on Trigger Pipeline for deployment.\nQA Environment:\n1. Open the GoCD dashboard and locate qa_xwing_deploy.\n2. Click on the PlayPlus button..\n3. Now follow the same steps as above\nSTG Environment:\n1. Navigate to stg_xwing_deploy on the GoCD dashboard.\n2. Click on the PlayPlus button.\n3. Now follow the same steps as above.\nVerification Process:\n1. Begin by deploying the code in QA.\n2. Verify changes in the QA environment.\n3. Move to STG, deploy the code, and verify changes.\n4. Proceed to PRD for the final deployment after successful QA and STG verifications.\nPost-Deployment Steps:\n1. After PRD deployment completion, open the prd_xwing_pipeline and verify the latest git hash which has been deployed.\n2. The latest commit will be of the tf-xwing repo which you can check in commits master.\n \nIMP NOTE: It is very important that you pick the latest git hash of terraform xwing for deployment as it will update all the Global whitelisted IPs present in the the repo.\nNote: Ensure thorough verification at each environment before progressing to the next stage.", "start_char_idx": 0, "end_char_idx": 2862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"ae55dcce-9d44-4c35-9c91-fd593cb82837": {"node_ids": ["33fc0151-2e02-458e-94e5-73b045491eea"], "metadata": {"file_path": "training_data/1_what_is_dex.txt", "file_name": "1_what_is_dex.txt", "file_type": "text/plain", "file_size": 1941, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "d91cd832-9088-4284-b5bd-50708100c153": {"node_ids": ["e3bf9e7e-f0ad-453d-8bdc-4759a0df682a"], "metadata": {"file_path": "training_data/2_why_dex.txt", "file_name": "2_why_dex.txt", "file_type": "text/plain", "file_size": 3121, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "1e2f4dba-9644-4b7a-9b74-2949187f21f4": {"node_ids": ["79127c6e-559d-47ad-8dbe-f48a0abc477a", "454c157f-cfbf-44a8-b647-758c547cbd39"], "metadata": {"file_path": "training_data/3_dex_features.txt", "file_name": "3_dex_features.txt", "file_type": "text/plain", "file_size": 6007, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "91e0514f-9f63-4c3e-aa2a-aa3af6054d67": {"node_ids": ["ebcfdae7-4079-4c2f-8134-a0ed4c15c8ba"], "metadata": {"file_path": "training_data/4_dex_opinions.txt", "file_name": "4_dex_opinions.txt", "file_type": "text/plain", "file_size": 2303, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "1e99d036-47a6-436b-b01f-1cb218a44dda": {"node_ids": ["1bedc233-5c0e-4c26-b7c4-0f8561c7dce5"], "metadata": {"file_path": "training_data/5_dex_installation.txt", "file_name": "5_dex_installation.txt", "file_type": "text/plain", "file_size": 2611, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "77f6664f-dba8-4710-bdda-6968fb42f191": {"node_ids": ["c6b7fd5d-0d79-41fe-ab70-0093a619ff9a", "306ddcb9-2bd6-4ad0-8e6c-4a8129f63da8", "cecb7494-107b-4454-baa2-12a4bbcd153b", "3b0ee5c6-6a7f-4663-aabe-f935c1b2f594", "867e037a-e9a0-4a26-b3f2-3c45dcb05611", "f2f712e8-d623-475d-ae04-e693bcd7c35c", "955129c8-b265-4bb6-bf75-512cc6926fb7", "6a081681-d577-4656-9758-87ac2f7c309d"], "metadata": {"file_path": "training_data/6_dex_quickstart.txt", "file_name": "6_dex_quickstart.txt", "file_type": "text/plain", "file_size": 28073, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "d20b4680-fa3c-4923-bc5d-806800227fce": {"node_ids": ["5137ef90-764c-414b-b9e1-e43e4fa304e3"], "metadata": {"file_path": "training_data/dct_project.txt", "file_name": "dct_project.txt", "file_type": "text/plain", "file_size": 4270, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "e6ead7c8-d59c-45af-91a9-ba2d8c243846": {"node_ids": ["4a90a6ca-26f0-4c74-b472-c49698db3398"], "metadata": {"file_path": "training_data/dct_setup_guide.txt", "file_name": "dct_setup_guide.txt", "file_type": "text/plain", "file_size": 1468, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "ca202dba-bbab-457f-b237-8c3fc683fe52": {"node_ids": ["3ca274a9-b6c5-4ad6-9fb0-bbcf28e4b6a9"], "metadata": {"file_path": "training_data/drupal_setup_guide.txt", "file_name": "drupal_setup_guide.txt", "file_type": "text/plain", "file_size": 2009, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}, "c2373593-dac7-4074-be12-eda8f197456b": {"node_ids": ["8bf7f3f9-0b60-4043-859a-191103855463"], "metadata": {"file_path": "training_data/xwing_deployment_process.txt", "file_name": "xwing_deployment_process.txt", "file_type": "text/plain", "file_size": 2903, "creation_date": "2024-01-12", "last_modified_date": "2024-01-12", "last_accessed_date": "2024-01-12"}}}}